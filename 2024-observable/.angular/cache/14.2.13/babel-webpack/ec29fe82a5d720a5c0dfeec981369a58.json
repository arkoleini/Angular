{"ast":null,"code":"import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nexport class ColdObservable extends Observable {\n  constructor(messages, scheduler) {\n    super(function (subscriber) {\n      const observable = this;\n      const index = observable.logSubscribedFrame();\n      const subscription = new Subscription();\n      subscription.add(new Subscription(() => {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscription;\n    });\n    this.messages = messages;\n    this.subscriptions = [];\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber) {\n    const messagesLength = this.messages.length;\n\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(this.scheduler.schedule(({\n        message,\n        subscriber\n      }) => {\n        message.notification.observe(subscriber);\n      }, message.frame, {\n        message,\n        subscriber\n      }));\n    }\n  }\n\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);","map":{"version":3,"names":["Observable","Subscription","SubscriptionLoggable","applyMixins","ColdObservable","constructor","messages","scheduler","subscriber","observable","index","logSubscribedFrame","subscription","add","logUnsubscribedFrame","scheduleMessages","subscriptions","messagesLength","length","i","message","schedule","notification","observe","frame"],"sources":["C:/Users/arkol/Source/Repos/Temp/Angular/2024-observable/node_modules/rxjs/_esm2015/internal/testing/ColdObservable.js"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nexport class ColdObservable extends Observable {\n    constructor(messages, scheduler) {\n        super(function (subscriber) {\n            const observable = this;\n            const index = observable.logSubscribedFrame();\n            const subscription = new Subscription();\n            subscription.add(new Subscription(() => {\n                observable.logUnsubscribedFrame(index);\n            }));\n            observable.scheduleMessages(subscriber);\n            return subscription;\n        });\n        this.messages = messages;\n        this.subscriptions = [];\n        this.scheduler = scheduler;\n    }\n    scheduleMessages(subscriber) {\n        const messagesLength = this.messages.length;\n        for (let i = 0; i < messagesLength; i++) {\n            const message = this.messages[i];\n            subscriber.add(this.scheduler.schedule(({ message, subscriber }) => { message.notification.observe(subscriber); }, message.frame, { message, subscriber }));\n        }\n    }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,oBAAT,QAAqC,wBAArC;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,OAAO,MAAMC,cAAN,SAA6BJ,UAA7B,CAAwC;EAC3CK,WAAW,CAACC,QAAD,EAAWC,SAAX,EAAsB;IAC7B,MAAM,UAAUC,UAAV,EAAsB;MACxB,MAAMC,UAAU,GAAG,IAAnB;MACA,MAAMC,KAAK,GAAGD,UAAU,CAACE,kBAAX,EAAd;MACA,MAAMC,YAAY,GAAG,IAAIX,YAAJ,EAArB;MACAW,YAAY,CAACC,GAAb,CAAiB,IAAIZ,YAAJ,CAAiB,MAAM;QACpCQ,UAAU,CAACK,oBAAX,CAAgCJ,KAAhC;MACH,CAFgB,CAAjB;MAGAD,UAAU,CAACM,gBAAX,CAA4BP,UAA5B;MACA,OAAOI,YAAP;IACH,CATD;IAUA,KAAKN,QAAL,GAAgBA,QAAhB;IACA,KAAKU,aAAL,GAAqB,EAArB;IACA,KAAKT,SAAL,GAAiBA,SAAjB;EACH;;EACDQ,gBAAgB,CAACP,UAAD,EAAa;IACzB,MAAMS,cAAc,GAAG,KAAKX,QAAL,CAAcY,MAArC;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,cAApB,EAAoCE,CAAC,EAArC,EAAyC;MACrC,MAAMC,OAAO,GAAG,KAAKd,QAAL,CAAca,CAAd,CAAhB;MACAX,UAAU,CAACK,GAAX,CAAe,KAAKN,SAAL,CAAec,QAAf,CAAwB,CAAC;QAAED,OAAF;QAAWZ;MAAX,CAAD,KAA6B;QAAEY,OAAO,CAACE,YAAR,CAAqBC,OAArB,CAA6Bf,UAA7B;MAA2C,CAAlG,EAAoGY,OAAO,CAACI,KAA5G,EAAmH;QAAEJ,OAAF;QAAWZ;MAAX,CAAnH,CAAf;IACH;EACJ;;AAtB0C;AAwB/CL,WAAW,CAACC,cAAD,EAAiB,CAACF,oBAAD,CAAjB,CAAX","ignoreList":[]},"metadata":{},"sourceType":"module"}