{"ast":null,"code":"import { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nexport class HotObservable extends Subject {\n  constructor(messages, scheduler) {\n    super();\n    this.messages = messages;\n    this.subscriptions = [];\n    this.scheduler = scheduler;\n  }\n\n  _subscribe(subscriber) {\n    const subject = this;\n    const index = subject.logSubscribedFrame();\n    const subscription = new Subscription();\n    subscription.add(new Subscription(() => {\n      subject.logUnsubscribedFrame(index);\n    }));\n    subscription.add(super._subscribe(subscriber));\n    return subscription;\n  }\n\n  setup() {\n    const subject = this;\n    const messagesLength = subject.messages.length;\n\n    for (var i = 0; i < messagesLength; i++) {\n      (() => {\n        var message = subject.messages[i];\n        subject.scheduler.schedule(() => {\n          message.notification.observe(subject);\n        }, message.frame);\n      })();\n    }\n  }\n\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);","map":{"version":3,"names":["Subject","Subscription","SubscriptionLoggable","applyMixins","HotObservable","constructor","messages","scheduler","subscriptions","_subscribe","subscriber","subject","index","logSubscribedFrame","subscription","add","logUnsubscribedFrame","setup","messagesLength","length","i","message","schedule","notification","observe","frame"],"sources":["C:/Users/arkol/Source/Repos/Temp/Angular/2024-observable/node_modules/rxjs/_esm2015/internal/testing/HotObservable.js"],"sourcesContent":["import { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nexport class HotObservable extends Subject {\n    constructor(messages, scheduler) {\n        super();\n        this.messages = messages;\n        this.subscriptions = [];\n        this.scheduler = scheduler;\n    }\n    _subscribe(subscriber) {\n        const subject = this;\n        const index = subject.logSubscribedFrame();\n        const subscription = new Subscription();\n        subscription.add(new Subscription(() => {\n            subject.logUnsubscribedFrame(index);\n        }));\n        subscription.add(super._subscribe(subscriber));\n        return subscription;\n    }\n    setup() {\n        const subject = this;\n        const messagesLength = subject.messages.length;\n        for (var i = 0; i < messagesLength; i++) {\n            (() => {\n                var message = subject.messages[i];\n                subject.scheduler.schedule(() => { message.notification.observe(subject); }, message.frame);\n            })();\n        }\n    }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,oBAAT,QAAqC,wBAArC;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,OAAO,MAAMC,aAAN,SAA4BJ,OAA5B,CAAoC;EACvCK,WAAW,CAACC,QAAD,EAAWC,SAAX,EAAsB;IAC7B;IACA,KAAKD,QAAL,GAAgBA,QAAhB;IACA,KAAKE,aAAL,GAAqB,EAArB;IACA,KAAKD,SAAL,GAAiBA,SAAjB;EACH;;EACDE,UAAU,CAACC,UAAD,EAAa;IACnB,MAAMC,OAAO,GAAG,IAAhB;IACA,MAAMC,KAAK,GAAGD,OAAO,CAACE,kBAAR,EAAd;IACA,MAAMC,YAAY,GAAG,IAAIb,YAAJ,EAArB;IACAa,YAAY,CAACC,GAAb,CAAiB,IAAId,YAAJ,CAAiB,MAAM;MACpCU,OAAO,CAACK,oBAAR,CAA6BJ,KAA7B;IACH,CAFgB,CAAjB;IAGAE,YAAY,CAACC,GAAb,CAAiB,MAAMN,UAAN,CAAiBC,UAAjB,CAAjB;IACA,OAAOI,YAAP;EACH;;EACDG,KAAK,GAAG;IACJ,MAAMN,OAAO,GAAG,IAAhB;IACA,MAAMO,cAAc,GAAGP,OAAO,CAACL,QAAR,CAAiBa,MAAxC;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,cAApB,EAAoCE,CAAC,EAArC,EAAyC;MACrC,CAAC,MAAM;QACH,IAAIC,OAAO,GAAGV,OAAO,CAACL,QAAR,CAAiBc,CAAjB,CAAd;QACAT,OAAO,CAACJ,SAAR,CAAkBe,QAAlB,CAA2B,MAAM;UAAED,OAAO,CAACE,YAAR,CAAqBC,OAArB,CAA6Bb,OAA7B;QAAwC,CAA3E,EAA6EU,OAAO,CAACI,KAArF;MACH,CAHD;IAIH;EACJ;;AA1BsC;AA4B3CtB,WAAW,CAACC,aAAD,EAAgB,CAACF,oBAAD,CAAhB,CAAX","ignoreList":[]},"metadata":{},"sourceType":"module"}