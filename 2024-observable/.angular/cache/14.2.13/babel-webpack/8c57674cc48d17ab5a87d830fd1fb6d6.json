{"ast":null,"code":"import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { ReplaySubject } from '../../ReplaySubject';\nconst DEFAULT_WEBSOCKET_CONFIG = {\n  url: '',\n  deserializer: e => JSON.parse(e.data),\n  serializer: value => JSON.stringify(value)\n};\nconst WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT = 'WebSocketSubject.error must be called with an object with an error code, and an optional reason: { code: number, reason: string }';\nexport class WebSocketSubject extends AnonymousSubject {\n  constructor(urlConfigOrSource, destination) {\n    super();\n\n    if (urlConfigOrSource instanceof Observable) {\n      this.destination = destination;\n      this.source = urlConfigOrSource;\n    } else {\n      const config = this._config = Object.assign({}, DEFAULT_WEBSOCKET_CONFIG);\n      this._output = new Subject();\n\n      if (typeof urlConfigOrSource === 'string') {\n        config.url = urlConfigOrSource;\n      } else {\n        for (let key in urlConfigOrSource) {\n          if (urlConfigOrSource.hasOwnProperty(key)) {\n            config[key] = urlConfigOrSource[key];\n          }\n        }\n      }\n\n      if (!config.WebSocketCtor && WebSocket) {\n        config.WebSocketCtor = WebSocket;\n      } else if (!config.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  lift(operator) {\n    const sock = new WebSocketSubject(this._config, this.destination);\n    sock.operator = operator;\n    sock.source = this;\n    return sock;\n  }\n\n  _resetState() {\n    this._socket = null;\n\n    if (!this.source) {\n      this.destination = new ReplaySubject();\n    }\n\n    this._output = new Subject();\n  }\n\n  multiplex(subMsg, unsubMsg, messageFilter) {\n    const self = this;\n    return new Observable(observer => {\n      try {\n        self.next(subMsg());\n      } catch (err) {\n        observer.error(err);\n      }\n\n      const subscription = self.subscribe(x => {\n        try {\n          if (messageFilter(x)) {\n            observer.next(x);\n          }\n        } catch (err) {\n          observer.error(err);\n        }\n      }, err => observer.error(err), () => observer.complete());\n      return () => {\n        try {\n          self.next(unsubMsg());\n        } catch (err) {\n          observer.error(err);\n        }\n\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  _connectSocket() {\n    const {\n      WebSocketCtor,\n      protocol,\n      url,\n      binaryType\n    } = this._config;\n    const observer = this._output;\n    let socket = null;\n\n    try {\n      socket = protocol ? new WebSocketCtor(url, protocol) : new WebSocketCtor(url);\n      this._socket = socket;\n\n      if (binaryType) {\n        this._socket.binaryType = binaryType;\n      }\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n\n    const subscription = new Subscription(() => {\n      this._socket = null;\n\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    socket.onopen = e => {\n      const {\n        _socket\n      } = this;\n\n      if (!_socket) {\n        socket.close();\n\n        this._resetState();\n\n        return;\n      }\n\n      const {\n        openObserver\n      } = this._config;\n\n      if (openObserver) {\n        openObserver.next(e);\n      }\n\n      const queue = this.destination;\n      this.destination = Subscriber.create(x => {\n        if (socket.readyState === 1) {\n          try {\n            const {\n              serializer\n            } = this._config;\n            socket.send(serializer(x));\n          } catch (e) {\n            this.destination.error(e);\n          }\n        }\n      }, e => {\n        const {\n          closingObserver\n        } = this._config;\n\n        if (closingObserver) {\n          closingObserver.next(undefined);\n        }\n\n        if (e && e.code) {\n          socket.close(e.code, e.reason);\n        } else {\n          observer.error(new TypeError(WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT));\n        }\n\n        this._resetState();\n      }, () => {\n        const {\n          closingObserver\n        } = this._config;\n\n        if (closingObserver) {\n          closingObserver.next(undefined);\n        }\n\n        socket.close();\n\n        this._resetState();\n      });\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add(queue.subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = e => {\n      this._resetState();\n\n      observer.error(e);\n    };\n\n    socket.onclose = e => {\n      this._resetState();\n\n      const {\n        closeObserver\n      } = this._config;\n\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = e => {\n      try {\n        const {\n          deserializer\n        } = this._config;\n        observer.next(deserializer(e));\n      } catch (err) {\n        observer.error(err);\n      }\n    };\n  }\n\n  _subscribe(subscriber) {\n    const {\n      source\n    } = this;\n\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n\n    if (!this._socket) {\n      this._connectSocket();\n    }\n\n    this._output.subscribe(subscriber);\n\n    subscriber.add(() => {\n      const {\n        _socket\n      } = this;\n\n      if (this._output.observers.length === 0) {\n        if (_socket && _socket.readyState === 1) {\n          _socket.close();\n        }\n\n        this._resetState();\n      }\n    });\n    return subscriber;\n  }\n\n  unsubscribe() {\n    const {\n      _socket\n    } = this;\n\n    if (_socket && _socket.readyState === 1) {\n      _socket.close();\n    }\n\n    this._resetState();\n\n    super.unsubscribe();\n  }\n\n}","map":{"version":3,"names":["Subject","AnonymousSubject","Subscriber","Observable","Subscription","ReplaySubject","DEFAULT_WEBSOCKET_CONFIG","url","deserializer","e","JSON","parse","data","serializer","value","stringify","WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT","WebSocketSubject","constructor","urlConfigOrSource","destination","source","config","_config","Object","assign","_output","key","hasOwnProperty","WebSocketCtor","WebSocket","Error","lift","operator","sock","_resetState","_socket","multiplex","subMsg","unsubMsg","messageFilter","self","observer","next","err","error","subscription","subscribe","x","complete","unsubscribe","_connectSocket","protocol","binaryType","socket","readyState","close","onopen","openObserver","queue","create","send","closingObserver","undefined","code","reason","TypeError","add","onerror","onclose","closeObserver","wasClean","onmessage","_subscribe","subscriber","observers","length"],"sources":["C:/Users/arkol/Source/Repos/Temp/Angular/2024-observable/node_modules/rxjs/_esm2015/internal/observable/dom/WebSocketSubject.js"],"sourcesContent":["import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { ReplaySubject } from '../../ReplaySubject';\nconst DEFAULT_WEBSOCKET_CONFIG = {\n    url: '',\n    deserializer: (e) => JSON.parse(e.data),\n    serializer: (value) => JSON.stringify(value),\n};\nconst WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT = 'WebSocketSubject.error must be called with an object with an error code, and an optional reason: { code: number, reason: string }';\nexport class WebSocketSubject extends AnonymousSubject {\n    constructor(urlConfigOrSource, destination) {\n        super();\n        if (urlConfigOrSource instanceof Observable) {\n            this.destination = destination;\n            this.source = urlConfigOrSource;\n        }\n        else {\n            const config = this._config = Object.assign({}, DEFAULT_WEBSOCKET_CONFIG);\n            this._output = new Subject();\n            if (typeof urlConfigOrSource === 'string') {\n                config.url = urlConfigOrSource;\n            }\n            else {\n                for (let key in urlConfigOrSource) {\n                    if (urlConfigOrSource.hasOwnProperty(key)) {\n                        config[key] = urlConfigOrSource[key];\n                    }\n                }\n            }\n            if (!config.WebSocketCtor && WebSocket) {\n                config.WebSocketCtor = WebSocket;\n            }\n            else if (!config.WebSocketCtor) {\n                throw new Error('no WebSocket constructor can be found');\n            }\n            this.destination = new ReplaySubject();\n        }\n    }\n    lift(operator) {\n        const sock = new WebSocketSubject(this._config, this.destination);\n        sock.operator = operator;\n        sock.source = this;\n        return sock;\n    }\n    _resetState() {\n        this._socket = null;\n        if (!this.source) {\n            this.destination = new ReplaySubject();\n        }\n        this._output = new Subject();\n    }\n    multiplex(subMsg, unsubMsg, messageFilter) {\n        const self = this;\n        return new Observable((observer) => {\n            try {\n                self.next(subMsg());\n            }\n            catch (err) {\n                observer.error(err);\n            }\n            const subscription = self.subscribe(x => {\n                try {\n                    if (messageFilter(x)) {\n                        observer.next(x);\n                    }\n                }\n                catch (err) {\n                    observer.error(err);\n                }\n            }, err => observer.error(err), () => observer.complete());\n            return () => {\n                try {\n                    self.next(unsubMsg());\n                }\n                catch (err) {\n                    observer.error(err);\n                }\n                subscription.unsubscribe();\n            };\n        });\n    }\n    _connectSocket() {\n        const { WebSocketCtor, protocol, url, binaryType } = this._config;\n        const observer = this._output;\n        let socket = null;\n        try {\n            socket = protocol ?\n                new WebSocketCtor(url, protocol) :\n                new WebSocketCtor(url);\n            this._socket = socket;\n            if (binaryType) {\n                this._socket.binaryType = binaryType;\n            }\n        }\n        catch (e) {\n            observer.error(e);\n            return;\n        }\n        const subscription = new Subscription(() => {\n            this._socket = null;\n            if (socket && socket.readyState === 1) {\n                socket.close();\n            }\n        });\n        socket.onopen = (e) => {\n            const { _socket } = this;\n            if (!_socket) {\n                socket.close();\n                this._resetState();\n                return;\n            }\n            const { openObserver } = this._config;\n            if (openObserver) {\n                openObserver.next(e);\n            }\n            const queue = this.destination;\n            this.destination = Subscriber.create((x) => {\n                if (socket.readyState === 1) {\n                    try {\n                        const { serializer } = this._config;\n                        socket.send(serializer(x));\n                    }\n                    catch (e) {\n                        this.destination.error(e);\n                    }\n                }\n            }, (e) => {\n                const { closingObserver } = this._config;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                if (e && e.code) {\n                    socket.close(e.code, e.reason);\n                }\n                else {\n                    observer.error(new TypeError(WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT));\n                }\n                this._resetState();\n            }, () => {\n                const { closingObserver } = this._config;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                socket.close();\n                this._resetState();\n            });\n            if (queue && queue instanceof ReplaySubject) {\n                subscription.add(queue.subscribe(this.destination));\n            }\n        };\n        socket.onerror = (e) => {\n            this._resetState();\n            observer.error(e);\n        };\n        socket.onclose = (e) => {\n            this._resetState();\n            const { closeObserver } = this._config;\n            if (closeObserver) {\n                closeObserver.next(e);\n            }\n            if (e.wasClean) {\n                observer.complete();\n            }\n            else {\n                observer.error(e);\n            }\n        };\n        socket.onmessage = (e) => {\n            try {\n                const { deserializer } = this._config;\n                observer.next(deserializer(e));\n            }\n            catch (err) {\n                observer.error(err);\n            }\n        };\n    }\n    _subscribe(subscriber) {\n        const { source } = this;\n        if (source) {\n            return source.subscribe(subscriber);\n        }\n        if (!this._socket) {\n            this._connectSocket();\n        }\n        this._output.subscribe(subscriber);\n        subscriber.add(() => {\n            const { _socket } = this;\n            if (this._output.observers.length === 0) {\n                if (_socket && _socket.readyState === 1) {\n                    _socket.close();\n                }\n                this._resetState();\n            }\n        });\n        return subscriber;\n    }\n    unsubscribe() {\n        const { _socket } = this;\n        if (_socket && _socket.readyState === 1) {\n            _socket.close();\n        }\n        this._resetState();\n        super.unsubscribe();\n    }\n}\n"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,gBAAlB,QAA0C,eAA1C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,MAAMC,wBAAwB,GAAG;EAC7BC,GAAG,EAAE,EADwB;EAE7BC,YAAY,EAAGC,CAAD,IAAOC,IAAI,CAACC,KAAL,CAAWF,CAAC,CAACG,IAAb,CAFQ;EAG7BC,UAAU,EAAGC,KAAD,IAAWJ,IAAI,CAACK,SAAL,CAAeD,KAAf;AAHM,CAAjC;AAKA,MAAME,qCAAqC,GAAG,mIAA9C;AACA,OAAO,MAAMC,gBAAN,SAA+BhB,gBAA/B,CAAgD;EACnDiB,WAAW,CAACC,iBAAD,EAAoBC,WAApB,EAAiC;IACxC;;IACA,IAAID,iBAAiB,YAAYhB,UAAjC,EAA6C;MACzC,KAAKiB,WAAL,GAAmBA,WAAnB;MACA,KAAKC,MAAL,GAAcF,iBAAd;IACH,CAHD,MAIK;MACD,MAAMG,MAAM,GAAG,KAAKC,OAAL,GAAeC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBnB,wBAAlB,CAA9B;MACA,KAAKoB,OAAL,GAAe,IAAI1B,OAAJ,EAAf;;MACA,IAAI,OAAOmB,iBAAP,KAA6B,QAAjC,EAA2C;QACvCG,MAAM,CAACf,GAAP,GAAaY,iBAAb;MACH,CAFD,MAGK;QACD,KAAK,IAAIQ,GAAT,IAAgBR,iBAAhB,EAAmC;UAC/B,IAAIA,iBAAiB,CAACS,cAAlB,CAAiCD,GAAjC,CAAJ,EAA2C;YACvCL,MAAM,CAACK,GAAD,CAAN,GAAcR,iBAAiB,CAACQ,GAAD,CAA/B;UACH;QACJ;MACJ;;MACD,IAAI,CAACL,MAAM,CAACO,aAAR,IAAyBC,SAA7B,EAAwC;QACpCR,MAAM,CAACO,aAAP,GAAuBC,SAAvB;MACH,CAFD,MAGK,IAAI,CAACR,MAAM,CAACO,aAAZ,EAA2B;QAC5B,MAAM,IAAIE,KAAJ,CAAU,uCAAV,CAAN;MACH;;MACD,KAAKX,WAAL,GAAmB,IAAIf,aAAJ,EAAnB;IACH;EACJ;;EACD2B,IAAI,CAACC,QAAD,EAAW;IACX,MAAMC,IAAI,GAAG,IAAIjB,gBAAJ,CAAqB,KAAKM,OAA1B,EAAmC,KAAKH,WAAxC,CAAb;IACAc,IAAI,CAACD,QAAL,GAAgBA,QAAhB;IACAC,IAAI,CAACb,MAAL,GAAc,IAAd;IACA,OAAOa,IAAP;EACH;;EACDC,WAAW,GAAG;IACV,KAAKC,OAAL,GAAe,IAAf;;IACA,IAAI,CAAC,KAAKf,MAAV,EAAkB;MACd,KAAKD,WAAL,GAAmB,IAAIf,aAAJ,EAAnB;IACH;;IACD,KAAKqB,OAAL,GAAe,IAAI1B,OAAJ,EAAf;EACH;;EACDqC,SAAS,CAACC,MAAD,EAASC,QAAT,EAAmBC,aAAnB,EAAkC;IACvC,MAAMC,IAAI,GAAG,IAAb;IACA,OAAO,IAAItC,UAAJ,CAAgBuC,QAAD,IAAc;MAChC,IAAI;QACAD,IAAI,CAACE,IAAL,CAAUL,MAAM,EAAhB;MACH,CAFD,CAGA,OAAOM,GAAP,EAAY;QACRF,QAAQ,CAACG,KAAT,CAAeD,GAAf;MACH;;MACD,MAAME,YAAY,GAAGL,IAAI,CAACM,SAAL,CAAeC,CAAC,IAAI;QACrC,IAAI;UACA,IAAIR,aAAa,CAACQ,CAAD,CAAjB,EAAsB;YAClBN,QAAQ,CAACC,IAAT,CAAcK,CAAd;UACH;QACJ,CAJD,CAKA,OAAOJ,GAAP,EAAY;UACRF,QAAQ,CAACG,KAAT,CAAeD,GAAf;QACH;MACJ,CAToB,EASlBA,GAAG,IAAIF,QAAQ,CAACG,KAAT,CAAeD,GAAf,CATW,EASU,MAAMF,QAAQ,CAACO,QAAT,EAThB,CAArB;MAUA,OAAO,MAAM;QACT,IAAI;UACAR,IAAI,CAACE,IAAL,CAAUJ,QAAQ,EAAlB;QACH,CAFD,CAGA,OAAOK,GAAP,EAAY;UACRF,QAAQ,CAACG,KAAT,CAAeD,GAAf;QACH;;QACDE,YAAY,CAACI,WAAb;MACH,CARD;IASH,CA1BM,CAAP;EA2BH;;EACDC,cAAc,GAAG;IACb,MAAM;MAAEtB,aAAF;MAAiBuB,QAAjB;MAA2B7C,GAA3B;MAAgC8C;IAAhC,IAA+C,KAAK9B,OAA1D;IACA,MAAMmB,QAAQ,GAAG,KAAKhB,OAAtB;IACA,IAAI4B,MAAM,GAAG,IAAb;;IACA,IAAI;MACAA,MAAM,GAAGF,QAAQ,GACb,IAAIvB,aAAJ,CAAkBtB,GAAlB,EAAuB6C,QAAvB,CADa,GAEb,IAAIvB,aAAJ,CAAkBtB,GAAlB,CAFJ;MAGA,KAAK6B,OAAL,GAAekB,MAAf;;MACA,IAAID,UAAJ,EAAgB;QACZ,KAAKjB,OAAL,CAAaiB,UAAb,GAA0BA,UAA1B;MACH;IACJ,CARD,CASA,OAAO5C,CAAP,EAAU;MACNiC,QAAQ,CAACG,KAAT,CAAepC,CAAf;MACA;IACH;;IACD,MAAMqC,YAAY,GAAG,IAAI1C,YAAJ,CAAiB,MAAM;MACxC,KAAKgC,OAAL,GAAe,IAAf;;MACA,IAAIkB,MAAM,IAAIA,MAAM,CAACC,UAAP,KAAsB,CAApC,EAAuC;QACnCD,MAAM,CAACE,KAAP;MACH;IACJ,CALoB,CAArB;;IAMAF,MAAM,CAACG,MAAP,GAAiBhD,CAAD,IAAO;MACnB,MAAM;QAAE2B;MAAF,IAAc,IAApB;;MACA,IAAI,CAACA,OAAL,EAAc;QACVkB,MAAM,CAACE,KAAP;;QACA,KAAKrB,WAAL;;QACA;MACH;;MACD,MAAM;QAAEuB;MAAF,IAAmB,KAAKnC,OAA9B;;MACA,IAAImC,YAAJ,EAAkB;QACdA,YAAY,CAACf,IAAb,CAAkBlC,CAAlB;MACH;;MACD,MAAMkD,KAAK,GAAG,KAAKvC,WAAnB;MACA,KAAKA,WAAL,GAAmBlB,UAAU,CAAC0D,MAAX,CAAmBZ,CAAD,IAAO;QACxC,IAAIM,MAAM,CAACC,UAAP,KAAsB,CAA1B,EAA6B;UACzB,IAAI;YACA,MAAM;cAAE1C;YAAF,IAAiB,KAAKU,OAA5B;YACA+B,MAAM,CAACO,IAAP,CAAYhD,UAAU,CAACmC,CAAD,CAAtB;UACH,CAHD,CAIA,OAAOvC,CAAP,EAAU;YACN,KAAKW,WAAL,CAAiByB,KAAjB,CAAuBpC,CAAvB;UACH;QACJ;MACJ,CAVkB,EAUfA,CAAD,IAAO;QACN,MAAM;UAAEqD;QAAF,IAAsB,KAAKvC,OAAjC;;QACA,IAAIuC,eAAJ,EAAqB;UACjBA,eAAe,CAACnB,IAAhB,CAAqBoB,SAArB;QACH;;QACD,IAAItD,CAAC,IAAIA,CAAC,CAACuD,IAAX,EAAiB;UACbV,MAAM,CAACE,KAAP,CAAa/C,CAAC,CAACuD,IAAf,EAAqBvD,CAAC,CAACwD,MAAvB;QACH,CAFD,MAGK;UACDvB,QAAQ,CAACG,KAAT,CAAe,IAAIqB,SAAJ,CAAclD,qCAAd,CAAf;QACH;;QACD,KAAKmB,WAAL;MACH,CAtBkB,EAsBhB,MAAM;QACL,MAAM;UAAE2B;QAAF,IAAsB,KAAKvC,OAAjC;;QACA,IAAIuC,eAAJ,EAAqB;UACjBA,eAAe,CAACnB,IAAhB,CAAqBoB,SAArB;QACH;;QACDT,MAAM,CAACE,KAAP;;QACA,KAAKrB,WAAL;MACH,CA7BkB,CAAnB;;MA8BA,IAAIwB,KAAK,IAAIA,KAAK,YAAYtD,aAA9B,EAA6C;QACzCyC,YAAY,CAACqB,GAAb,CAAiBR,KAAK,CAACZ,SAAN,CAAgB,KAAK3B,WAArB,CAAjB;MACH;IACJ,CA7CD;;IA8CAkC,MAAM,CAACc,OAAP,GAAkB3D,CAAD,IAAO;MACpB,KAAK0B,WAAL;;MACAO,QAAQ,CAACG,KAAT,CAAepC,CAAf;IACH,CAHD;;IAIA6C,MAAM,CAACe,OAAP,GAAkB5D,CAAD,IAAO;MACpB,KAAK0B,WAAL;;MACA,MAAM;QAAEmC;MAAF,IAAoB,KAAK/C,OAA/B;;MACA,IAAI+C,aAAJ,EAAmB;QACfA,aAAa,CAAC3B,IAAd,CAAmBlC,CAAnB;MACH;;MACD,IAAIA,CAAC,CAAC8D,QAAN,EAAgB;QACZ7B,QAAQ,CAACO,QAAT;MACH,CAFD,MAGK;QACDP,QAAQ,CAACG,KAAT,CAAepC,CAAf;MACH;IACJ,CAZD;;IAaA6C,MAAM,CAACkB,SAAP,GAAoB/D,CAAD,IAAO;MACtB,IAAI;QACA,MAAM;UAAED;QAAF,IAAmB,KAAKe,OAA9B;QACAmB,QAAQ,CAACC,IAAT,CAAcnC,YAAY,CAACC,CAAD,CAA1B;MACH,CAHD,CAIA,OAAOmC,GAAP,EAAY;QACRF,QAAQ,CAACG,KAAT,CAAeD,GAAf;MACH;IACJ,CARD;EASH;;EACD6B,UAAU,CAACC,UAAD,EAAa;IACnB,MAAM;MAAErD;IAAF,IAAa,IAAnB;;IACA,IAAIA,MAAJ,EAAY;MACR,OAAOA,MAAM,CAAC0B,SAAP,CAAiB2B,UAAjB,CAAP;IACH;;IACD,IAAI,CAAC,KAAKtC,OAAV,EAAmB;MACf,KAAKe,cAAL;IACH;;IACD,KAAKzB,OAAL,CAAaqB,SAAb,CAAuB2B,UAAvB;;IACAA,UAAU,CAACP,GAAX,CAAe,MAAM;MACjB,MAAM;QAAE/B;MAAF,IAAc,IAApB;;MACA,IAAI,KAAKV,OAAL,CAAaiD,SAAb,CAAuBC,MAAvB,KAAkC,CAAtC,EAAyC;QACrC,IAAIxC,OAAO,IAAIA,OAAO,CAACmB,UAAR,KAAuB,CAAtC,EAAyC;UACrCnB,OAAO,CAACoB,KAAR;QACH;;QACD,KAAKrB,WAAL;MACH;IACJ,CARD;IASA,OAAOuC,UAAP;EACH;;EACDxB,WAAW,GAAG;IACV,MAAM;MAAEd;IAAF,IAAc,IAApB;;IACA,IAAIA,OAAO,IAAIA,OAAO,CAACmB,UAAR,KAAuB,CAAtC,EAAyC;MACrCnB,OAAO,CAACoB,KAAR;IACH;;IACD,KAAKrB,WAAL;;IACA,MAAMe,WAAN;EACH;;AAnMkD","ignoreList":[]},"metadata":{},"sourceType":"module"}