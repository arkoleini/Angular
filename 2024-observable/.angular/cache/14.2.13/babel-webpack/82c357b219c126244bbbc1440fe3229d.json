{"ast":null,"code":"import { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { VirtualTimeScheduler, VirtualAction } from '../scheduler/VirtualTimeScheduler';\nimport { AsyncScheduler } from '../scheduler/AsyncScheduler';\nconst defaultMaxFrame = 750;\nexport class TestScheduler extends VirtualTimeScheduler {\n  constructor(assertDeepEqual) {\n    super(VirtualAction, defaultMaxFrame);\n    this.assertDeepEqual = assertDeepEqual;\n    this.hotObservables = [];\n    this.coldObservables = [];\n    this.flushTests = [];\n    this.runMode = false;\n  }\n\n  createTime(marbles) {\n    const indexOf = marbles.indexOf('|');\n\n    if (indexOf === -1) {\n      throw new Error('marble diagram for time should have a completion marker \"|\"');\n    }\n\n    return indexOf * TestScheduler.frameTimeFactor;\n  }\n\n  createColdObservable(marbles, values, error) {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('cold observable cannot have subscription offset \"^\"');\n    }\n\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('cold observable cannot have unsubscription marker \"!\"');\n    }\n\n    const messages = TestScheduler.parseMarbles(marbles, values, error, undefined, this.runMode);\n    const cold = new ColdObservable(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  }\n\n  createHotObservable(marbles, values, error) {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('hot observable cannot have unsubscription marker \"!\"');\n    }\n\n    const messages = TestScheduler.parseMarbles(marbles, values, error, undefined, this.runMode);\n    const subject = new HotObservable(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  }\n\n  materializeInnerObservable(observable, outerFrame) {\n    const messages = [];\n    observable.subscribe(value => {\n      messages.push({\n        frame: this.frame - outerFrame,\n        notification: Notification.createNext(value)\n      });\n    }, err => {\n      messages.push({\n        frame: this.frame - outerFrame,\n        notification: Notification.createError(err)\n      });\n    }, () => {\n      messages.push({\n        frame: this.frame - outerFrame,\n        notification: Notification.createComplete()\n      });\n    });\n    return messages;\n  }\n\n  expectObservable(observable, subscriptionMarbles = null) {\n    const actual = [];\n    const flushTest = {\n      actual,\n      ready: false\n    };\n    const subscriptionParsed = TestScheduler.parseMarblesAsSubscriptions(subscriptionMarbles, this.runMode);\n    const subscriptionFrame = subscriptionParsed.subscribedFrame === Number.POSITIVE_INFINITY ? 0 : subscriptionParsed.subscribedFrame;\n    const unsubscriptionFrame = subscriptionParsed.unsubscribedFrame;\n    let subscription;\n    this.schedule(() => {\n      subscription = observable.subscribe(x => {\n        let value = x;\n\n        if (x instanceof Observable) {\n          value = this.materializeInnerObservable(value, this.frame);\n        }\n\n        actual.push({\n          frame: this.frame,\n          notification: Notification.createNext(value)\n        });\n      }, err => {\n        actual.push({\n          frame: this.frame,\n          notification: Notification.createError(err)\n        });\n      }, () => {\n        actual.push({\n          frame: this.frame,\n          notification: Notification.createComplete()\n        });\n      });\n    }, subscriptionFrame);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n    const {\n      runMode\n    } = this;\n    return {\n      toBe(marbles, values, errorValue) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true, runMode);\n      }\n\n    };\n  }\n\n  expectSubscriptions(actualSubscriptionLogs) {\n    const flushTest = {\n      actual: actualSubscriptionLogs,\n      ready: false\n    };\n    this.flushTests.push(flushTest);\n    const {\n      runMode\n    } = this;\n    return {\n      toBe(marbles) {\n        const marblesArray = typeof marbles === 'string' ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(marbles => TestScheduler.parseMarblesAsSubscriptions(marbles, runMode));\n      }\n\n    };\n  }\n\n  flush() {\n    const hotObservables = this.hotObservables;\n\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    super.flush();\n    this.flushTests = this.flushTests.filter(test => {\n      if (test.ready) {\n        this.assertDeepEqual(test.actual, test.expected);\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  static parseMarblesAsSubscriptions(marbles, runMode = false) {\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n\n    const len = marbles.length;\n    let groupStart = -1;\n    let subscriptionFrame = Number.POSITIVE_INFINITY;\n    let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n    let frame = 0;\n\n    for (let i = 0; i < len; i++) {\n      let nextFrame = frame;\n\n      const advanceFrameBy = count => {\n        nextFrame += count * this.frameTimeFactor;\n      };\n\n      const c = marbles[i];\n\n      switch (c) {\n        case ' ':\n          if (!runMode) {\n            advanceFrameBy(1);\n          }\n\n          break;\n\n        case '-':\n          advanceFrameBy(1);\n          break;\n\n        case '(':\n          groupStart = frame;\n          advanceFrameBy(1);\n          break;\n\n        case ')':\n          groupStart = -1;\n          advanceFrameBy(1);\n          break;\n\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' + 'subscription marble diagram. There can only be one.');\n          }\n\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          advanceFrameBy(1);\n          break;\n\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' + 'subscription marble diagram. There can only be one.');\n          }\n\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n\n        default:\n          if (runMode && c.match(/^[0-9]$/)) {\n            if (i === 0 || marbles[i - 1] === ' ') {\n              const buffer = marbles.slice(i);\n              const match = buffer.match(/^([0-9]+(?:\\.[0-9]+)?)(ms|s|m) /);\n\n              if (match) {\n                i += match[0].length - 1;\n                const duration = parseFloat(match[1]);\n                const unit = match[2];\n                let durationInMs;\n\n                switch (unit) {\n                  case 'ms':\n                    durationInMs = duration;\n                    break;\n\n                  case 's':\n                    durationInMs = duration * 1000;\n                    break;\n\n                  case 'm':\n                    durationInMs = duration * 1000 * 60;\n                    break;\n\n                  default:\n                    break;\n                }\n\n                advanceFrameBy(durationInMs / this.frameTimeFactor);\n                break;\n              }\n            }\n          }\n\n          throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' + 'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n\n      frame = nextFrame;\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  }\n\n  static parseMarbles(marbles, values, errorValue, materializeInnerObservables = false, runMode = false) {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('conventional marble diagrams cannot have the ' + 'unsubscription marker \"!\"');\n    }\n\n    const len = marbles.length;\n    const testMessages = [];\n    const subIndex = runMode ? marbles.replace(/^[ ]+/, '').indexOf('^') : marbles.indexOf('^');\n    let frame = subIndex === -1 ? 0 : subIndex * -this.frameTimeFactor;\n    const getValue = typeof values !== 'object' ? x => x : x => {\n      if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n        return values[x].messages;\n      }\n\n      return values[x];\n    };\n    let groupStart = -1;\n\n    for (let i = 0; i < len; i++) {\n      let nextFrame = frame;\n\n      const advanceFrameBy = count => {\n        nextFrame += count * this.frameTimeFactor;\n      };\n\n      let notification;\n      const c = marbles[i];\n\n      switch (c) {\n        case ' ':\n          if (!runMode) {\n            advanceFrameBy(1);\n          }\n\n          break;\n\n        case '-':\n          advanceFrameBy(1);\n          break;\n\n        case '(':\n          groupStart = frame;\n          advanceFrameBy(1);\n          break;\n\n        case ')':\n          groupStart = -1;\n          advanceFrameBy(1);\n          break;\n\n        case '|':\n          notification = Notification.createComplete();\n          advanceFrameBy(1);\n          break;\n\n        case '^':\n          advanceFrameBy(1);\n          break;\n\n        case '#':\n          notification = Notification.createError(errorValue || 'error');\n          advanceFrameBy(1);\n          break;\n\n        default:\n          if (runMode && c.match(/^[0-9]$/)) {\n            if (i === 0 || marbles[i - 1] === ' ') {\n              const buffer = marbles.slice(i);\n              const match = buffer.match(/^([0-9]+(?:\\.[0-9]+)?)(ms|s|m) /);\n\n              if (match) {\n                i += match[0].length - 1;\n                const duration = parseFloat(match[1]);\n                const unit = match[2];\n                let durationInMs;\n\n                switch (unit) {\n                  case 'ms':\n                    durationInMs = duration;\n                    break;\n\n                  case 's':\n                    durationInMs = duration * 1000;\n                    break;\n\n                  case 'm':\n                    durationInMs = duration * 1000 * 60;\n                    break;\n\n                  default:\n                    break;\n                }\n\n                advanceFrameBy(durationInMs / this.frameTimeFactor);\n                break;\n              }\n            }\n          }\n\n          notification = Notification.createNext(getValue(c));\n          advanceFrameBy(1);\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({\n          frame: groupStart > -1 ? groupStart : frame,\n          notification\n        });\n      }\n\n      frame = nextFrame;\n    }\n\n    return testMessages;\n  }\n\n  run(callback) {\n    const prevFrameTimeFactor = TestScheduler.frameTimeFactor;\n    const prevMaxFrames = this.maxFrames;\n    TestScheduler.frameTimeFactor = 1;\n    this.maxFrames = Number.POSITIVE_INFINITY;\n    this.runMode = true;\n    AsyncScheduler.delegate = this;\n    const helpers = {\n      cold: this.createColdObservable.bind(this),\n      hot: this.createHotObservable.bind(this),\n      flush: this.flush.bind(this),\n      expectObservable: this.expectObservable.bind(this),\n      expectSubscriptions: this.expectSubscriptions.bind(this)\n    };\n\n    try {\n      const ret = callback(helpers);\n      this.flush();\n      return ret;\n    } finally {\n      TestScheduler.frameTimeFactor = prevFrameTimeFactor;\n      this.maxFrames = prevMaxFrames;\n      this.runMode = false;\n      AsyncScheduler.delegate = undefined;\n    }\n  }\n\n}","map":{"version":3,"names":["Observable","Notification","ColdObservable","HotObservable","SubscriptionLog","VirtualTimeScheduler","VirtualAction","AsyncScheduler","defaultMaxFrame","TestScheduler","constructor","assertDeepEqual","hotObservables","coldObservables","flushTests","runMode","createTime","marbles","indexOf","Error","frameTimeFactor","createColdObservable","values","error","messages","parseMarbles","undefined","cold","push","createHotObservable","subject","materializeInnerObservable","observable","outerFrame","subscribe","value","frame","notification","createNext","err","createError","createComplete","expectObservable","subscriptionMarbles","actual","flushTest","ready","subscriptionParsed","parseMarblesAsSubscriptions","subscriptionFrame","subscribedFrame","Number","POSITIVE_INFINITY","unsubscriptionFrame","unsubscribedFrame","subscription","schedule","x","unsubscribe","toBe","errorValue","expected","expectSubscriptions","actualSubscriptionLogs","marblesArray","map","flush","length","shift","setup","filter","test","len","groupStart","i","nextFrame","advanceFrameBy","count","c","match","buffer","slice","duration","parseFloat","unit","durationInMs","materializeInnerObservables","testMessages","subIndex","replace","getValue","run","callback","prevFrameTimeFactor","prevMaxFrames","maxFrames","delegate","helpers","bind","hot","ret"],"sources":["C:/Users/arkol/Source/Repos/Temp/Angular/2024-observable/node_modules/rxjs/_esm2015/internal/testing/TestScheduler.js"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { VirtualTimeScheduler, VirtualAction } from '../scheduler/VirtualTimeScheduler';\nimport { AsyncScheduler } from '../scheduler/AsyncScheduler';\nconst defaultMaxFrame = 750;\nexport class TestScheduler extends VirtualTimeScheduler {\n    constructor(assertDeepEqual) {\n        super(VirtualAction, defaultMaxFrame);\n        this.assertDeepEqual = assertDeepEqual;\n        this.hotObservables = [];\n        this.coldObservables = [];\n        this.flushTests = [];\n        this.runMode = false;\n    }\n    createTime(marbles) {\n        const indexOf = marbles.indexOf('|');\n        if (indexOf === -1) {\n            throw new Error('marble diagram for time should have a completion marker \"|\"');\n        }\n        return indexOf * TestScheduler.frameTimeFactor;\n    }\n    createColdObservable(marbles, values, error) {\n        if (marbles.indexOf('^') !== -1) {\n            throw new Error('cold observable cannot have subscription offset \"^\"');\n        }\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('cold observable cannot have unsubscription marker \"!\"');\n        }\n        const messages = TestScheduler.parseMarbles(marbles, values, error, undefined, this.runMode);\n        const cold = new ColdObservable(messages, this);\n        this.coldObservables.push(cold);\n        return cold;\n    }\n    createHotObservable(marbles, values, error) {\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('hot observable cannot have unsubscription marker \"!\"');\n        }\n        const messages = TestScheduler.parseMarbles(marbles, values, error, undefined, this.runMode);\n        const subject = new HotObservable(messages, this);\n        this.hotObservables.push(subject);\n        return subject;\n    }\n    materializeInnerObservable(observable, outerFrame) {\n        const messages = [];\n        observable.subscribe((value) => {\n            messages.push({ frame: this.frame - outerFrame, notification: Notification.createNext(value) });\n        }, (err) => {\n            messages.push({ frame: this.frame - outerFrame, notification: Notification.createError(err) });\n        }, () => {\n            messages.push({ frame: this.frame - outerFrame, notification: Notification.createComplete() });\n        });\n        return messages;\n    }\n    expectObservable(observable, subscriptionMarbles = null) {\n        const actual = [];\n        const flushTest = { actual, ready: false };\n        const subscriptionParsed = TestScheduler.parseMarblesAsSubscriptions(subscriptionMarbles, this.runMode);\n        const subscriptionFrame = subscriptionParsed.subscribedFrame === Number.POSITIVE_INFINITY ?\n            0 : subscriptionParsed.subscribedFrame;\n        const unsubscriptionFrame = subscriptionParsed.unsubscribedFrame;\n        let subscription;\n        this.schedule(() => {\n            subscription = observable.subscribe(x => {\n                let value = x;\n                if (x instanceof Observable) {\n                    value = this.materializeInnerObservable(value, this.frame);\n                }\n                actual.push({ frame: this.frame, notification: Notification.createNext(value) });\n            }, (err) => {\n                actual.push({ frame: this.frame, notification: Notification.createError(err) });\n            }, () => {\n                actual.push({ frame: this.frame, notification: Notification.createComplete() });\n            });\n        }, subscriptionFrame);\n        if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n        }\n        this.flushTests.push(flushTest);\n        const { runMode } = this;\n        return {\n            toBe(marbles, values, errorValue) {\n                flushTest.ready = true;\n                flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true, runMode);\n            }\n        };\n    }\n    expectSubscriptions(actualSubscriptionLogs) {\n        const flushTest = { actual: actualSubscriptionLogs, ready: false };\n        this.flushTests.push(flushTest);\n        const { runMode } = this;\n        return {\n            toBe(marbles) {\n                const marblesArray = (typeof marbles === 'string') ? [marbles] : marbles;\n                flushTest.ready = true;\n                flushTest.expected = marblesArray.map(marbles => TestScheduler.parseMarblesAsSubscriptions(marbles, runMode));\n            }\n        };\n    }\n    flush() {\n        const hotObservables = this.hotObservables;\n        while (hotObservables.length > 0) {\n            hotObservables.shift().setup();\n        }\n        super.flush();\n        this.flushTests = this.flushTests.filter(test => {\n            if (test.ready) {\n                this.assertDeepEqual(test.actual, test.expected);\n                return false;\n            }\n            return true;\n        });\n    }\n    static parseMarblesAsSubscriptions(marbles, runMode = false) {\n        if (typeof marbles !== 'string') {\n            return new SubscriptionLog(Number.POSITIVE_INFINITY);\n        }\n        const len = marbles.length;\n        let groupStart = -1;\n        let subscriptionFrame = Number.POSITIVE_INFINITY;\n        let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n        let frame = 0;\n        for (let i = 0; i < len; i++) {\n            let nextFrame = frame;\n            const advanceFrameBy = (count) => {\n                nextFrame += count * this.frameTimeFactor;\n            };\n            const c = marbles[i];\n            switch (c) {\n                case ' ':\n                    if (!runMode) {\n                        advanceFrameBy(1);\n                    }\n                    break;\n                case '-':\n                    advanceFrameBy(1);\n                    break;\n                case '(':\n                    groupStart = frame;\n                    advanceFrameBy(1);\n                    break;\n                case ')':\n                    groupStart = -1;\n                    advanceFrameBy(1);\n                    break;\n                case '^':\n                    if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n                        throw new Error('found a second subscription point \\'^\\' in a ' +\n                            'subscription marble diagram. There can only be one.');\n                    }\n                    subscriptionFrame = groupStart > -1 ? groupStart : frame;\n                    advanceFrameBy(1);\n                    break;\n                case '!':\n                    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n                        throw new Error('found a second subscription point \\'^\\' in a ' +\n                            'subscription marble diagram. There can only be one.');\n                    }\n                    unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n                    break;\n                default:\n                    if (runMode && c.match(/^[0-9]$/)) {\n                        if (i === 0 || marbles[i - 1] === ' ') {\n                            const buffer = marbles.slice(i);\n                            const match = buffer.match(/^([0-9]+(?:\\.[0-9]+)?)(ms|s|m) /);\n                            if (match) {\n                                i += match[0].length - 1;\n                                const duration = parseFloat(match[1]);\n                                const unit = match[2];\n                                let durationInMs;\n                                switch (unit) {\n                                    case 'ms':\n                                        durationInMs = duration;\n                                        break;\n                                    case 's':\n                                        durationInMs = duration * 1000;\n                                        break;\n                                    case 'm':\n                                        durationInMs = duration * 1000 * 60;\n                                        break;\n                                    default:\n                                        break;\n                                }\n                                advanceFrameBy(durationInMs / this.frameTimeFactor);\n                                break;\n                            }\n                        }\n                    }\n                    throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n                        'subscription marble diagram. Found instead \\'' + c + '\\'.');\n            }\n            frame = nextFrame;\n        }\n        if (unsubscriptionFrame < 0) {\n            return new SubscriptionLog(subscriptionFrame);\n        }\n        else {\n            return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n        }\n    }\n    static parseMarbles(marbles, values, errorValue, materializeInnerObservables = false, runMode = false) {\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('conventional marble diagrams cannot have the ' +\n                'unsubscription marker \"!\"');\n        }\n        const len = marbles.length;\n        const testMessages = [];\n        const subIndex = runMode ? marbles.replace(/^[ ]+/, '').indexOf('^') : marbles.indexOf('^');\n        let frame = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n        const getValue = typeof values !== 'object' ?\n            (x) => x :\n            (x) => {\n                if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n                    return values[x].messages;\n                }\n                return values[x];\n            };\n        let groupStart = -1;\n        for (let i = 0; i < len; i++) {\n            let nextFrame = frame;\n            const advanceFrameBy = (count) => {\n                nextFrame += count * this.frameTimeFactor;\n            };\n            let notification;\n            const c = marbles[i];\n            switch (c) {\n                case ' ':\n                    if (!runMode) {\n                        advanceFrameBy(1);\n                    }\n                    break;\n                case '-':\n                    advanceFrameBy(1);\n                    break;\n                case '(':\n                    groupStart = frame;\n                    advanceFrameBy(1);\n                    break;\n                case ')':\n                    groupStart = -1;\n                    advanceFrameBy(1);\n                    break;\n                case '|':\n                    notification = Notification.createComplete();\n                    advanceFrameBy(1);\n                    break;\n                case '^':\n                    advanceFrameBy(1);\n                    break;\n                case '#':\n                    notification = Notification.createError(errorValue || 'error');\n                    advanceFrameBy(1);\n                    break;\n                default:\n                    if (runMode && c.match(/^[0-9]$/)) {\n                        if (i === 0 || marbles[i - 1] === ' ') {\n                            const buffer = marbles.slice(i);\n                            const match = buffer.match(/^([0-9]+(?:\\.[0-9]+)?)(ms|s|m) /);\n                            if (match) {\n                                i += match[0].length - 1;\n                                const duration = parseFloat(match[1]);\n                                const unit = match[2];\n                                let durationInMs;\n                                switch (unit) {\n                                    case 'ms':\n                                        durationInMs = duration;\n                                        break;\n                                    case 's':\n                                        durationInMs = duration * 1000;\n                                        break;\n                                    case 'm':\n                                        durationInMs = duration * 1000 * 60;\n                                        break;\n                                    default:\n                                        break;\n                                }\n                                advanceFrameBy(durationInMs / this.frameTimeFactor);\n                                break;\n                            }\n                        }\n                    }\n                    notification = Notification.createNext(getValue(c));\n                    advanceFrameBy(1);\n                    break;\n            }\n            if (notification) {\n                testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification });\n            }\n            frame = nextFrame;\n        }\n        return testMessages;\n    }\n    run(callback) {\n        const prevFrameTimeFactor = TestScheduler.frameTimeFactor;\n        const prevMaxFrames = this.maxFrames;\n        TestScheduler.frameTimeFactor = 1;\n        this.maxFrames = Number.POSITIVE_INFINITY;\n        this.runMode = true;\n        AsyncScheduler.delegate = this;\n        const helpers = {\n            cold: this.createColdObservable.bind(this),\n            hot: this.createHotObservable.bind(this),\n            flush: this.flush.bind(this),\n            expectObservable: this.expectObservable.bind(this),\n            expectSubscriptions: this.expectSubscriptions.bind(this),\n        };\n        try {\n            const ret = callback(helpers);\n            this.flush();\n            return ret;\n        }\n        finally {\n            TestScheduler.frameTimeFactor = prevFrameTimeFactor;\n            this.maxFrames = prevMaxFrames;\n            this.runMode = false;\n            AsyncScheduler.delegate = undefined;\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}